#!/bin/bash

# This script downloads SRA files from NCBI, processes them for 12S fish DNA, and searches for Acipenser fulvescens
# Requirements: SRA Toolkit, BLAST+, Python 3.x with Biopython

# ---- Configuration ----
# Update these variables with your specific information
SRR_LIST="SRR12345678 SRR12345679 SRR12345680" # Add your SRR accession numbers here
OUTPUT_DIR="acipenser_search"
THREADS=4
BLAST_DB="12S_fish_db"  # Path to your BLAST database (if you have one)
REF_SEQUENCE="acipenser_fulvescens_12S.fasta"  # Reference sequence for A. fulvescens

# Create output directory
mkdir -p $OUTPUT_DIR
cd $OUTPUT_DIR

# Create log file
LOG_FILE="acipenser_search.log"
echo "Starting Acipenser fulvescens search on $(date)" > $LOG_FILE

# ---- Download reference sequence if needed ----
if [ ! -f "$REF_SEQUENCE" ]; then
    echo "Downloading Acipenser fulvescens 12S reference sequence..." | tee -a $LOG_FILE
    # Using Entrez Direct to fetch the sequence (install with: sh -c "$(curl -fsSL https://ftp.ncbi.nlm.nih.gov/entrez/entrezdirect/install-edirect.sh)")
    esearch -db nucleotide -query "Acipenser fulvescens[ORGN] AND 12S[TITL]" | efetch -format fasta > $REF_SEQUENCE
    
    # If no results found, try a broader search
    if [ ! -s "$REF_SEQUENCE" ]; then
        esearch -db nucleotide -query "Acipenser fulvescens[ORGN] AND (12S OR ribosomal)" | efetch -format fasta > $REF_SEQUENCE
        echo "Note: Used broader search parameters for reference sequence" | tee -a $LOG_FILE
    fi
fi

# ---- Create BLAST database from reference sequence ----
echo "Creating BLAST database from reference sequence..." | tee -a $LOG_FILE
makeblastdb -in $REF_SEQUENCE -dbtype nucl -out acipenser_db

# ---- Process each SRR accession ----
for SRR in $SRR_LIST; do
    echo "Processing $SRR..." | tee -a $LOG_FILE
    
    # Download SRA data
    echo "Downloading $SRR data..." | tee -a $LOG_FILE
    prefetch $SRR
    
    # Convert SRA to FASTQ
    echo "Converting $SRR to FASTQ..." | tee -a $LOG_FILE
    fasterq-dump --split-files $SRR -O .
    
    # Check if paired-end or single-end
    if [ -f "${SRR}_2.fastq" ]; then
        PAIRED=true
        echo "$SRR is paired-end data" | tee -a $LOG_FILE
    else
        PAIRED=false
        echo "$SRR is single-end data" | tee -a $LOG_FILE
    fi
    
    # Quality filtering and adapter trimming using Trimmomatic
    if [ "$PAIRED" = true ]; then
        echo "Trimming paired-end reads for $SRR..." | tee -a $LOG_FILE
        trimmomatic PE -threads $THREADS ${SRR}_1.fastq ${SRR}_2.fastq \
            ${SRR}_1_trimmed.fastq ${SRR}_1_unpaired.fastq \
            ${SRR}_2_trimmed.fastq ${SRR}_2_unpaired.fastq \
            ILLUMINACLIP:TruSeq3-PE.fa:2:30:10 LEADING:3 TRAILING:3 SLIDINGWINDOW:4:15 MINLEN:36
        
        # Combine trimmed reads for BLAST
        cat ${SRR}_1_trimmed.fastq ${SRR}_2_trimmed.fastq ${SRR}_1_unpaired.fastq ${SRR}_2_unpaired.fastq > ${SRR}_all_trimmed.fastq
    else
        echo "Trimming single-end reads for $SRR..." | tee -a $LOG_FILE
        trimmomatic SE -threads $THREADS ${SRR}_1.fastq ${SRR}_1_trimmed.fastq \
            ILLUMINACLIP:TruSeq3-SE.fa:2:30:10 LEADING:3 TRAILING:3 SLIDINGWINDOW:4:15 MINLEN:36
        
        mv ${SRR}_1_trimmed.fastq ${SRR}_all_trimmed.fastq
    fi
    
    # Convert FASTQ to FASTA for BLAST
    echo "Converting $SRR FASTQ to FASTA..." | tee -a $LOG_FILE
    python3 -c "
from Bio import SeqIO
SeqIO.convert('${SRR}_all_trimmed.fastq', 'fastq', '${SRR}.fasta', 'fasta')
print('Conversion complete')
"
    
    # Run BLAST to search for Acipenser fulvescens
    echo "Running BLAST search for Acipenser fulvescens in $SRR..." | tee -a $LOG_FILE
    blastn -query ${SRR}.fasta -db acipenser_db -outfmt "6 qseqid sseqid pident length mismatch gapopen qstart qend sstart send evalue bitscore" \
        -out ${SRR}_blast_results.txt -num_threads $THREADS -perc_identity 90
    
    # Count hits and calculate basic statistics
    HITS=$(wc -l < ${SRR}_blast_results.txt)
    echo "Found $HITS potential matches to Acipenser fulvescens in $SRR" | tee -a $LOG_FILE
    
    # Filter high-quality hits (identity > 97% and alignment length > 80bp)
    awk '$3 >= 97 && $4 >= 80' ${SRR}_blast_results.txt > ${SRR}_high_quality_hits.txt
    HQ_HITS=$(wc -l < ${SRR}_high_quality_hits.txt)
    echo "Of these, $HQ_HITS are high-quality matches (≥97% identity, ≥80bp alignment)" | tee -a $LOG_FILE
    
    # Calculate percentage of reads matching A. fulvescens
    TOTAL_READS=$(grep -c "^@" ${SRR}_all_trimmed.fastq)
    PERCENT=$(echo "scale=6; $HQ_HITS / $TOTAL_READS * 100" | bc)
    echo "Percentage of reads matching A. fulvescens: $PERCENT%" | tee -a $LOG_FILE
    
    # Generate summary report
    echo "Generating summary report for $SRR..." | tee -a $LOG_FILE
    echo -e "SRR Accession\tTotal Reads\tPotential Matches\tHigh-Quality Matches\tPercentage" > ${SRR}_summary.tsv
    echo -e "$SRR\t$TOTAL_READS\t$HITS\t$HQ_HITS\t$PERCENT%" >> ${SRR}_summary.tsv
    
    # Clean up intermediate files
    rm -f ${SRR}_1.fastq ${SRR}_2.fastq
    rm -f ${SRR}_1_unpaired.fastq ${SRR}_2_unpaired.fastq
done

# ---- Generate overall summary ----
echo "Generating overall summary..." | tee -a $LOG_FILE
echo -e "SRR Accession\tTotal Reads\tPotential Matches\tHigh-Quality Matches\tPercentage" > overall_summary.tsv
for SRR in $SRR_LIST; do
    tail -n 1 ${SRR}_summary.tsv >> overall_summary.tsv
done

# Create visualization Python script
cat > visualize_results.py << 'EOL'
#!/usr/bin/env python3

import matplotlib.pyplot as plt
import pandas as pd
import sys
import os

# Read overall summary
df = pd.read_csv('overall_summary.tsv', sep='\t')

# Create bar chart of percentage matches
plt.figure(figsize=(12, 6))
plt.bar(df['SRR Accession'], df['Percentage'], color='steelblue')
plt.title('Percentage of Reads Matching Acipenser fulvescens by Sample')
plt.xlabel('SRR Accession')
plt.ylabel('Percentage (%)')
plt.xticks(rotation=45)
plt.tight_layout()
plt.savefig('acipenser_percentage.png')

# Create bar chart of absolute matches
plt.figure(figsize=(12, 6))
plt.bar(df['SRR Accession'], df['High-Quality Matches'], color='darkgreen')
plt.title('Number of High-Quality Matches to Acipenser fulvescens by Sample')
plt.xlabel('SRR Accession')
plt.ylabel('Number of Matches')
plt.xticks(rotation=45)
plt.tight_layout()
plt.savefig('acipenser_counts.png')

print("Visualization complete. Output saved as acipenser_percentage.png and acipenser_counts.png")
EOL

# Make the Python script executable
chmod +x visualize_results.py

# Run visualization if Python and matplotlib are available
if command -v python3 &> /dev/null; then
    if python3 -c "import matplotlib" &> /dev/null; then
        echo "Creating visualizations..." | tee -a $LOG_FILE
        python3 visualize_results.py
    else
        echo "Matplotlib not found. Skipping visualization." | tee -a $LOG_FILE
    fi
else
    echo "Python 3 not found. Skipping visualization." | tee -a $LOG_FILE
fi

echo "Analysis complete. Results are in $OUTPUT_DIR" | tee -a $LOG_FILE
